{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","filterItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSA+BeA,MA3Bf,SAAmBC,GAEf,IACMC,EADQD,EAAME,MACGC,KAAI,SAAAD,GAEnB,OAAO,yBAAKE,UAAU,OAAOC,IAAKH,EAAMG,KACpC,2BACI,2BAAOC,KAAK,OAAOC,GAAIL,EAAMG,IAAKG,MAAON,EAAMO,KAAMC,SAAU,SAACC,GAC5DX,EAAMY,UAAUD,EAAEE,OAAOL,MAAON,EAAMG,QAC9C,8BACI,kBAAC,IAAD,CACAD,UAAU,UAAUU,QAAU,kBAAMd,EAAMe,WAAWb,EAAMG,MAAMW,KAAK,gBAOtF,OACA,6BACI,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAQ,eAChCjB,K,eClBTkB,IAAQC,IAAIC,K,IAqGGC,E,kDAnGX,WAAYtB,GACX,IAAD,8BACI,cAAMA,IACDuB,MAAM,CACPrB,MAAM,GACNsB,YAAY,CACRf,KAAK,GACLJ,IAAI,KAGZ,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKX,WAAa,EAAKA,WAAWW,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZrB,E,wDAeYf,GAERiB,KAAKC,SAAS,CACVL,YAAc,CACVf,KAAOE,EAAEE,OAAOL,MAChBH,IAAIyB,KAAKC,W,8BAKbpB,GAEJA,EAAEqB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAG3B,GAFAU,QAAQC,IAAIF,GAEM,KAAfA,EAAQxB,KACX,CACI,IAAMP,EAAK,sBAAM0B,KAAKL,MAAMrB,OAAjB,CAAwB+B,IACnCL,KAAKC,SAAS,CACV3B,MAAMA,EACNsB,YAAY,CACRf,KAAK,GACLJ,IAAI,S,iCAMTA,GAER,IAAM+B,EAAcR,KAAKL,MAAMrB,MAAMmC,QAAO,SAAAnC,GAAK,OAC/CA,EAAMG,MAAMA,KACZuB,KAAKC,SAAS,CACV3B,MAAMkC,M,gCAIL3B,EAAMJ,GAEZ,IAAMH,EAAQ0B,KAAKL,MAAMrB,MACzBA,EAAMC,KAAI,SAAAD,GACHA,EAAMG,MAAMA,IAEXH,EAAMO,KAAKA,MAInBmB,KAAKC,SACD,CACI3B,MAAMA,M,+BAMd,OACI,yBAAKE,UAAU,OACX,yBAAKA,UAAU,cACX,4CAGJ,yBAAKA,UAAU,QACX,gCACI,0BAAMG,GAAG,aAAa+B,SAAUV,KAAKD,SACjC,2BAAOrB,KAAK,OAAOiC,YAAY,aAAa/B,MAAOoB,KAAKL,MAAMC,YAAYf,KAAMC,SAAUkB,KAAKH,cAC/F,4BAAQnB,KAAK,UAAb,UAGR,kBAAC,EAAD,CAAUJ,MAAQ0B,KAAKL,MAAMrB,MAAQa,WAAca,KAAKb,WAAYH,UAAWgB,KAAKhB,WAApF,MAGJ,yBAAKR,UAAU,UAEP,gDAAqB,8CAArB,IAAqC,6BAArC,kD,GA3FNoC,IAAMC,WCIJC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a9d53bb2.chunk.js","sourcesContent":["import React from 'react';\nimport \"./ListItems.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FlipMove from 'react-flip-move';\nfunction ListItems(props)\n{\n    const items = props.items;\n    const listItems= items.map(items =>\n        {\n            return <div className=\"list\" key={items.key}>\n                <p>\n                    <input type=\"text\" id={items.key} value={items.text} onChange={(e)=>{\n                        props.setUpdate(e.target.value, items.key)}} />\n                <span>\n                    <FontAwesomeIcon\n                    className=\"faicons\" onClick= {() => props.deleteItem(items.key)} icon=\"trash\" > \n                    </FontAwesomeIcon>\n                </span>\n                </p>\n               \n            </div>\n        })\n    return(\n    <div>\n        <FlipMove duration={400} easing =\"ease-in-out\">\n        {listItems}\n        </FlipMove>\n        </div>\n    )\n}\n\nexport default ListItems;","import React from 'react';\nimport \"./App.css\";\nimport ListItem from \"./ListItems\";\n\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faTrash);\nclass App extends React.Component{\n    constructor(props)\n    {\n        super(props)\n        this.state={\n            items:[],\n            currentItem:{\n                text:'',\n                key:''\n            }\n        }\n        this.handleInput = this.handleInput.bind(this);\n        this.addItem = this.addItem.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n        this.setUpdate = this.setUpdate.bind(this);\n    }\n\n    handleInput(e)\n    {\n        this.setState({\n            currentItem : {\n                text : e.target.value,\n                key:Date.now()\n            }\n        })\n    }\n    \n    addItem(e)\n    {\n        e.preventDefault();\n        const newItem = this.state.currentItem;\n        console.log(newItem);\n\n        if(newItem.text!==\"\")\n        {\n            const items =[...this.state.items, newItem];\n            this.setState({\n                items:items,\n                currentItem:{\n                    text:'',\n                    key:''\n                }\n            })\n        }\n    }\n\n    deleteItem(key)\n    {\n       const filterItems = this.state.items.filter(items=>\n         items.key!==key);\n         this.setState({\n             items:filterItems\n         }) \n    }\n\n    setUpdate(text, key)\n    {\n        const items = this.state.items;\n        items.map(items=>{\n            if(items.key===key)\n            {\n                items.text=text;\n            }\n\n        })\n        this.setState(\n            {\n                items:items\n            }\n        )\n    }\n\n    render(){\n        return(\n            <div className=\"App\">\n                <div className=\"headername\">\n                    <h1>To do App! </h1>\n                </div>\n                \n                <div className=\"main\">\n                    <header>\n                        <form id=\"to-do-form\" onSubmit={this.addItem}>\n                            <input type=\"text\" placeholder=\"Enter Task\" value={this.state.currentItem.text} onChange={this.handleInput}></input>\n                            <button type=\"submit\"> Add</button>\n                        </form>\n                    </header>\n                    <ListItem items= {this.state.items } deleteItem = {this.deleteItem} setUpdate={this.setUpdate}> </ListItem>\n                </div>\n\n                <div className=\"footer\">\n                \n                        <p> Parikshit Jagtap <span>❣️</span> <br/>\n                        Copyright © 2020 All rights reserved.</p>\n                </div>\n\n                \n            </div>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}